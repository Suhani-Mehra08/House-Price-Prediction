# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14rxLtBXupzFbzyN8Xz6lXWYktumFupDs
"""

import pandas as pd

# Load the datasets
train_data = pd.read_csv('/content/train (1).csv')
test_data = pd.read_csv('/content/test (1).csv')

print(train_data.head())

print(test_data.head())

# Check for missing values
print(train_data.isnull().sum())
print(test_data.isnull().sum())

numeric_cols_train = train_data.select_dtypes(include=['number']).columns
numeric_cols_test = test_data.select_dtypes(include=['number']).columns

train_data[numeric_cols_train] = train_data[numeric_cols_train].fillna(train_data[numeric_cols_train].mean())
test_data[numeric_cols_test] = test_data[numeric_cols_test].fillna(test_data[numeric_cols_test].mean())

print(train_data.columns)

X_train = train_data.drop(['SalePrice'], axis=1)
y_train = train_data['SalePrice']

# Test data does not have the target column
X_test = test_data

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder  # Import OneHotEncoder for categorical features

# Split the training data into train and validation sets
X_train_split, X_val, y_train_split, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Identify categorical columns
categorical_cols = X_train_split.select_dtypes(include=['object']).columns

# Apply one-hot encoding to categorical features
encoder = OneHotEncoder(handle_unknown='ignore')  # Handle unknown categories in test data
encoded_train = encoder.fit_transform(X_train_split[categorical_cols])
encoded_val = encoder.transform(X_val[categorical_cols])

# Convert sparse matrices to dense arrays
encoded_train = encoded_train.toarray()
encoded_val = encoded_val.toarray()

# Get feature names after one-hot encoding
encoded_feature_names = encoder.get_feature_names_out(categorical_cols)

# Create DataFrames from encoded arrays
encoded_train_df = pd.DataFrame(encoded_train, columns=encoded_feature_names, index=X_train_split.index)
encoded_val_df = pd.DataFrame(encoded_val, columns=encoded_feature_names, index=X_val.index)

# Drop original categorical columns and concatenate encoded features
X_train_split = X_train_split.drop(categorical_cols, axis=1).join(encoded_train_df)
X_val = X_val.drop(categorical_cols, axis=1).join(encoded_val_df)

# Train the model
model = LinearRegression()
model.fit(X_train_split, y_train_split)

# Predict on the validation set
y_pred = model.predict(X_val)

# Evaluate the model
mse = mean_squared_error(y_val, y_pred)
r2 = r2_score(y_val, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'RÂ² Score: {r2}')

# Identify categorical columns in the test data
categorical_cols_test = X_test.select_dtypes(include=['object']).columns

# Apply one-hot encoding to categorical features in the test data
encoded_test = encoder.transform(X_test[categorical_cols_test])  # Use the same encoder fitted on training data

# Convert sparse matrix to dense array
encoded_test = encoded_test.toarray()

# Create DataFrame from encoded array
encoded_test_df = pd.DataFrame(encoded_test, columns=encoded_feature_names, index=X_test.index)

# Drop original categorical columns and concatenate encoded features
X_test = X_test.drop(categorical_cols_test, axis=1).join(encoded_test_df)

# Now you can predict
test_predictions = model.predict(X_test)

# ... rest of your code for saving predictions

# Predict house prices on the test dataset (now with consistent features)
test_predictions = model.predict(X_test)

# Save the predictions to a CSV file
output = pd.DataFrame({'Id': test_data.index, 'PredictedPrice': test_predictions})
output.to_csv('house_price_predictions.csv', index=False)

print("Predictions saved to house_price_predictions.csv")

